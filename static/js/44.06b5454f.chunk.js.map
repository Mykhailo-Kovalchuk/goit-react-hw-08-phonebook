{"version":3,"file":"static/js/44.06b5454f.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/contactForm.module.css?2173","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/contactList.module.css?ddc0","utils/constants.js","redux/contacts/contactsSlice.selectors.js","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/pages/Contacts/ContactsPage.module.css?3d45","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"contactForm_contactForm__f4X+T\",\"formTitle\":\"contactForm_formTitle__cG5TD\",\"formLabel\":\"contactForm_formLabel__PNGQI\",\"contactFormInput\":\"contactForm_contactFormInput__iE2Z5\",\"formButton\":\"contactForm_formButton__uIAMr\"};","// import { Component } from 'react';\nimport css from './contactForm.module.css';\n// import { nanoid } from 'nanoid';\n\n// import { useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { apiAddContact } from '../../redux/contacts/contactsSlice';\n\nconst ContactForm = () => {\n  // const [name, setName] = useState('');\n  // const [phone, setPhone] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n  // console.log(contacts)\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    // const form = event.currentTarget;\n    // console.log(form.elements);\n    // const name = form.elements.name.value;\n    // const phone = form.elements.phone.value;\n    // const id = nanoid(5);\n    // const formData = { id, name, phone };\n\n    let name = event.currentTarget.elements.contactName.value;\n    const number = event.currentTarget.elements.contactNumber.value;\n    const formData = { name, number };\n    console.log(formData);\n\n    if (\n      contacts?.some(\n        contact =>\n          contact.name && contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in your contacts`);\n      return;\n    }\n\n    dispatch(apiAddContact(formData));\n    // .unwrap()\n    // .then(() => {\n    // }).catch((error) => console.error());;\n    // Очистка форми\n    // setName('');\n    // setPhone('');\n    event.currentTarget.elements.contactName.value = ''; // очистка форми після сабміту\n    event.currentTarget.elements.contactNumber.value = '';\n  };\n\n  return (\n    <form className={css.contactForm} onSubmit={handleFormSubmit}>\n      <h4 className={css.formTitle}>Name</h4>\n      <label className={css.formLabel}>\n        <input\n          className={css.contactFormInput}\n          type=\"text\"\n          name=\"contactName\"\n          required\n          // value={name} // прив'язка до стану name\n          // onChange={e => setName(e.target.value)} //  обробник onChange\n          placeholder=\"Write a name\"\n        />\n      </label>\n\n      <h4 className={css.formTitle}>Number</h4>\n      <label className={css.formLabel}>\n        <input\n          className={css.contactFormInput}\n          type=\"tel\"\n          name=\"contactNumber\"\n          required\n          // value={phone} //  прив'язка до стану number/phone\n          // onChange={e => setPhone(e.target.value)} // Додано обробник onChange\n          placeholder=\"Write a number\"\n          // pattern=\"\\d{3}-\\d{2}-\\d{2}\"\n          title=\"xxx-xx-xx\"\n        />\n      </label>\n      <button type=\"submit\" className={css.formButton}>\n        Add to contacts\n      </button>\n    </form>\n  );\n};\n\nexport { ContactForm };\n","// extracted by mini-css-extract-plugin\nexport default {\"filterText\":\"filter_filterText__SdFw6\",\"filterInput\":\"filter_filterInput__2T6yn\"};","import css from './filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/contactsSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChangeListener = event => {\n    // const filterValue = event.currentTarget.value;\n    // console.log(filterValue)\n    const filterValue = event.currentTarget.value;\n    dispatch(setFilter(filterValue.trim().toLowerCase()));\n  };\n\n  return (\n    <>\n      <p className={css.filterText}>Find contact by name</p>\n      <input\n        className={css.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleChangeListener}\n      />\n    </>\n  );\n};\n\nexport { Filter };\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"contactList_contactList__rfM1N\",\"contactListItem\":\"contactList_contactListItem__T4ojX\",\"contactListText\":\"contactList_contactListText__fKufX\",\"contactListBtnDelete\":\"contactList_contactListBtnDelete__dljzp\"};","export const STATUSES = {\n    idle: 'idle',\n    pending: 'pending',\n    success: 'success',\n    error: 'error',\n  };","export const selectContacts = state => state.contacts.contacts;\nexport const selectContactsError = state => state.contacts.error;\nexport const selectContactsIsLoading = state => state.contacts.isLoading;\nexport const selectContatctsFilter = state => state.contacts.filter;\n\n","import css from './contactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  apiDeleteContact,\n  apiGetContacts,\n} from '../../redux/contacts/contactsSlice';\nimport { useEffect } from 'react';\nimport { STATUSES } from '../../utils/constants';\nimport {\n  selectContacts,\n  selectContactsError,\n  selectContactsIsLoading,\n  selectContatctsFilter,\n} from '../../redux/contacts/contactsSlice.selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  // дістаємо наші дані зі стану\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n  const filter = useSelector(selectContatctsFilter);\n\n  // const contacts = useSelector(state => state.contacts.contacts);\n  // const filter = useSelector(state => state.contacts.filter);\n\n  // const status = useSelector(state => state.contacts.status);\n  // const error = useSelector(state => state.contacts.error);\n\n  useEffect(() => {\n    dispatch(apiGetContacts());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter?.toLowerCase(); ///////////////////?\n    // console.log(normalizedFilter)\n    // console.log(contacts);\n    return contacts?.filter(\n      (\n        contact /////////////////////////  ?\n      ) => contact.name && contact.name.toLowerCase().includes(normalizedFilter)\n\n      // contact.name\n    );\n  };\n\n  const filteredContacts = getFilteredContacts();\n  // console.log(filteredContacts)\n\n  const handleDelete = contactId => {\n    // console.log(contactId)\n    dispatch(apiDeleteContact(contactId));\n    ///////////// поставити нотіфікашту про успішне видалення контакту\n  };\n\n  return (\n    <>\n      {isLoading === STATUSES.pending && <div>Loading...</div>}\n      {isLoading === STATUSES.error && <div>{error}</div>}\n\n      <ul className={css.contactList}>\n        {filteredContacts.map(\n          (\n            contact ////////////////////////?\n          ) => (\n            <li key={contact.id} className={css.contactListItem}>\n              <p className={css.contactListText}>\n                {contact.name}: {contact.number}\n              </p>\n              <button\n                type=\"button\"\n                onClick={() => handleDelete(contact.id)}\n                className={css.contactListBtnDelete}\n              >\n                Delete contact\n              </button>\n            </li>\n          )\n        )}\n      </ul>\n    </>\n  );\n};\n\nexport { ContactList };\n","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"ContactsPage_text__7-UT3\"};","// import { apiRegisterUser } from '../redux/auth/authSlice';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { Filter } from '../../components/Filter/Filter';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport css from './ContactsPage.module.css'\n\nconst ContactsPage = () => {\n  return (\n    <div\n      style={{\n        // height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 40,\n        color: '#010101',\n      }}\n    >\n      <p className={css.text}>Add new contact to your phonebook</p>\n      <ContactForm />\n      <p className={css.text}>Your contacts</p>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactForm","dispatch","useDispatch","contacts","useSelector","state","_jsxs","className","css","onSubmit","event","preventDefault","name","currentTarget","elements","contactName","value","number","contactNumber","formData","console","log","some","contact","toLowerCase","alert","concat","apiAddContact","children","_jsx","type","required","placeholder","title","Filter","_Fragment","onChange","filterValue","setFilter","trim","STATUSES","selectContacts","selectContactsError","error","selectContactsIsLoading","isLoading","selectContatctsFilter","filter","ContactList","useEffect","apiGetContacts","filteredContacts","normalizedFilter","includes","getFilteredContacts","map","onClick","contactId","id","apiDeleteContact","style","display","flexDirection","justifyContent","alignItems","fontSize","color"],"sourceRoot":""}